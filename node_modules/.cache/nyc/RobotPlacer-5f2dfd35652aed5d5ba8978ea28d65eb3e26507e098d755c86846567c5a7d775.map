{"version":3,"file":"/home/anuradha/toy-robot-simulator/src/action/RobotPlacer.ts","sources":["/home/anuradha/toy-robot-simulator/src/action/RobotPlacer.ts"],"names":[],"mappings":";;;;;AAAA,oFAA8D;AAC9D,0FAAoE;AACpE,wCAA2F;AAE3F;IAGE;IAAwB,CAAC;IAEX,uBAAW,GAAzB;QACE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE;YACzB,WAAW,CAAC,QAAQ,GAAG,IAAI,WAAW,EAAE,CAAC;SAC1C;QACD,OAAO,WAAW,CAAC,QAAQ,CAAC;IAC9B,CAAC;IAEM,gCAAU,GAAjB,UAAkB,SAAiB;QACjC,IAAI;YACF,IAAM,UAAU,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,IAAI,EAAE,EAAR,CAAQ,CAAC,CAAC;YAC7D,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC;gBAAE,MAAM,IAAI,+BAAqB,EAAE,CAAC;YAC7D,IACE,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC9B,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC9B,CAAC,MAAM,CAAC,MAAM,CAAC,sBAAc,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAmB,CAAC;gBAExE,MAAM,IAAI,4BAAkB,EAAE,CAAC;YAEjC,OAAO;gBACL,SAAS,EAAE,EAAE,CAAC,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,EAAqB;gBACxF,SAAS,EAAE,UAAU,CAAC,CAAC,CAAmB;aAC3C,CAAC;SACH;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IACH,kBAAC;AAAD,CAAC,AA/BD,IA+BC;AAED,kBAAe,WAAW,CAAC","sourcesContent":["import IncorrectInfoError from \"../errors/IncorrectInfoError\";\nimport InsufficientInfoError from \"../errors/InsufficientInfoError\";\nimport { IRobotPlacer, RobotCoordinate, RobotDirection, RobotInput } from \"../types/robot\";\n\nclass RobotPlacer implements IRobotPlacer {\n  private static instance: IRobotPlacer;\n\n  private constructor () {}\n\n  public static getInstance(): IRobotPlacer {\n    if (!RobotPlacer.instance) {\n      RobotPlacer.instance = new RobotPlacer();\n    }\n    return RobotPlacer.instance;\n  }\n\n  public parseInput(placement: string): RobotInput | Error {\n    try {\n      const _placement = placement.split(',').map((p) => p.trim());\n      if (_placement.length < 3) throw new InsufficientInfoError();\n      if (\n        isNaN(parseInt(_placement[0])) ||\n        isNaN(parseInt(_placement[0])) ||\n        !Object.values(RobotDirection).includes(_placement[2] as RobotDirection)\n      )\n        throw new IncorrectInfoError();\n\n      return {\n        positions: { x: parseInt(_placement[0]), y: parseInt(_placement[1]) } as RobotCoordinate,\n        direction: _placement[2] as RobotDirection,\n      };\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\nexport default RobotPlacer;"]}