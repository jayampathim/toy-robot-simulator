{"version":3,"file":"/home/anuradha/toy-robot-simulator/src/action/Robot/index.ts","sources":["/home/anuradha/toy-robot-simulator/src/action/Robot/index.ts"],"names":[],"mappings":"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","sourcesContent":["import IState from '../../types/state';\nimport IRobot, { IRobotMover, IRobotPlacer, RobotCoordinate, RobotDirection, RobotInput, IRobotRotater, RobotRotation, IRobotReporter } from '../../types/robot';\nimport RobotState from '../RobotState';\n\nclass Robot implements IRobot {\n  private mover: IRobotMover;\n  private placer: IRobotPlacer;\n  private rotater: IRobotRotater;\n  private reporter: IRobotReporter;\n\n  private isSafeMode: boolean = true;\n  private positions: RobotCoordinate = { x: 0, y: 0 };\n  private direction: RobotDirection = RobotDirection.NORTH;\n  private dimensions: RobotCoordinate = { x: 5, y: 5 };\n\n  constructor(mover: IRobotMover, placer: IRobotPlacer, rotater: IRobotRotater, reporter: IRobotReporter) {\n    this.mover = mover;\n    this.placer = placer;\n    this.rotater = rotater;\n    this.reporter = reporter;\n  }\n\n  setSafeMode(isSafeMode: boolean): IRobot {\n    this.isSafeMode = isSafeMode;\n    return this;\n  }\n\n  setDimensions(dimensions: RobotCoordinate = { x: 5, y: 5 }): IRobot {\n    this.dimensions = dimensions;\n    return this;\n  }\n\n  getSafeMode(): boolean {\n    return this.isSafeMode;\n  }\n\n  getPosition(): RobotCoordinate {\n    return this.positions;\n  }\n\n  getDirection(): RobotDirection {\n    return this.direction;\n  }\n\n  getDimensions(): RobotCoordinate {\n    return this.dimensions;\n  }\n\n  report(): string | Error {\n    try {\n      return this.reporter.report(this.positions, this.direction);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  place(placement: string): void | Error {\n    try {\n      const parsedInput = this.placer.parseInput(placement) as RobotInput;\n      this.positions = parsedInput.positions;\n      this.direction = parsedInput.direction;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  move(step?: number): void | Error {\n    try {\n      this.positions = this.mover.move(this.direction, this.positions, this.dimensions, step) as RobotCoordinate;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  rotate(rotation: RobotRotation): void | Error {\n    try {\n      this.direction = this.rotater.rotate(this.direction, rotation) as RobotDirection;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  backup(): IState {\n    return new RobotState(this);\n  }\n\n  restore(state: IState): void {\n    const _state = state.getState();\n    this.positions = _state.positions;\n    this.direction = _state.direction;\n  }\n}\n\nexport default Robot;\n"]}