{"version":3,"file":"/home/anuradha/toy-robot-simulator/src/action/RobotMover/index.ts","sources":["/home/anuradha/toy-robot-simulator/src/action/RobotMover/index.ts"],"names":[],"mappings":";;;;;AAAA,yFAAmE;AACnE,2CAAiF;AACjF,oEAA8C;AAC9C,sEAAgD;AAChD,sEAAgD;AAChD,oEAA8C;AAE9C;IAGE;IAAwB,CAAC;IAEX,sBAAW,GAAzB;QACE,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE;YACxB,UAAU,CAAC,QAAQ,GAAG,IAAI,UAAU,EAAE,CAAC;SACxC;QACD,OAAO,UAAU,CAAC,QAAQ,CAAC;IAC7B,CAAC;IAED,yBAAI,GAAJ,UACE,SAAyB,EACzB,SAA0B,EAC1B,UAA2B,EAC3B,IAAa;QAEb,IAAI;YACF,QAAQ,SAAS,EAAE;gBACjB,KAAK,sBAAc,CAAC,KAAK;oBACvB,OAAO,IAAI,yBAAe,CAAC,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC,cAAc,EAAE,CAAC;gBACtF,KAAK,sBAAc,CAAC,KAAK;oBACvB,OAAO,IAAI,yBAAe,CAAC,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC,cAAc,EAAE,CAAC;gBACtF,KAAK,sBAAc,CAAC,IAAI;oBACtB,OAAO,IAAI,wBAAc,CAAC,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC,cAAc,EAAE,CAAC;gBACrF,KAAK,sBAAc,CAAC,IAAI;oBACtB,OAAO,IAAI,wBAAc,CAAC,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC,cAAc,EAAE,CAAC;gBACrF;oBACE,MAAM,IAAI,4BAAkB,EAAE,CAAC;aAClC;SACF;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IACH,iBAAC;AAAD,CAAC,AAnCD,IAmCC;AAED,kBAAe,UAAU,CAAC","sourcesContent":["import IncorrectInfoError from '../../failures/IncorrectInfoError';\nimport { IRobotMover, RobotDirection, RobotCoordinate } from '../../types/robot';\nimport RobotMoverEast from './RobotMoverEast';\nimport RobotMoverNorth from './RobotMoverNorth';\nimport RobotMoverSouth from './RobotMoverSouth';\nimport RobotMoverWest from './RobotMoverWest';\n\nclass RobotMover implements IRobotMover {\n  private static instance: IRobotMover;\n\n  private constructor () {}\n\n  public static getInstance(): IRobotMover {\n    if (!RobotMover.instance) {\n      RobotMover.instance = new RobotMover();\n    }\n    return RobotMover.instance;\n  }\n\n  move (\n    direction: RobotDirection,\n    positions: RobotCoordinate,\n    dimensions: RobotCoordinate,\n    step?: number\n  ): RobotCoordinate | Error {\n    try {\n      switch (direction) {\n        case RobotDirection.NORTH:\n          return new RobotMoverNorth(direction, positions, dimensions, step).getNewPosition();\n        case RobotDirection.SOUTH:\n          return new RobotMoverSouth(direction, positions, dimensions, step).getNewPosition();\n        case RobotDirection.EAST:\n          return new RobotMoverEast(direction, positions, dimensions, step).getNewPosition();\n        case RobotDirection.WEST:\n          return new RobotMoverWest(direction, positions, dimensions, step).getNewPosition();\n        default:\n          throw new IncorrectInfoError();\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\nexport default RobotMover;\n"]}