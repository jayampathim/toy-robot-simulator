{"version":3,"file":"/home/anuradha/toy-robot-simulator/src/action/RobotRotater.ts","sources":["/home/anuradha/toy-robot-simulator/src/action/RobotRotater.ts"],"names":[],"mappings":";;AAAA,wCAA8E;AAE9E;IAGE;IAAuB,CAAC;IAEV,wBAAW,GAAzB;QACE,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE;YAC1B,YAAY,CAAC,QAAQ,GAAG,IAAI,YAAY,EAAE,CAAC;SAC5C;QACD,OAAO,YAAY,CAAC,QAAQ,CAAC;IAC/B,CAAC;IAEM,6BAAM,GAAb,UAAc,gBAAgC,EAAE,QAAuB;QACrE,IAAI;YACF,IAAM,UAAU,GAAG,CAAC,sBAAc,CAAC,KAAK,EAAE,sBAAc,CAAC,IAAI,EAAE,sBAAc,CAAC,KAAK,EAAE,sBAAc,CAAC,IAAI,CAAC,CAAC;YAC1G,IAAI,qBAAqB,GAAG,UAAU,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;YAEjE,QAAQ,QAAQ,EAAE;gBAChB,KAAK,qBAAa,CAAC,IAAI;oBACrB,qBAAqB,EAAE,CAAC;oBACxB,MAAM;gBACR,KAAK,qBAAa,CAAC,KAAK;oBACtB,qBAAqB,EAAE,CAAC;oBACxB,MAAM;aACT;YAED,IAAI,qBAAqB,GAAG,CAAC,EAAE;gBAC7B,OAAO,sBAAc,CAAC,IAAI,CAAC;aAC5B;iBAAM,IAAI,qBAAqB,GAAG,CAAC,EAAE;gBACpC,OAAO,sBAAc,CAAC,KAAK,CAAC;aAC7B;iBAAM;gBACL,OAAO,UAAU,CAAC,qBAAqB,CAAC,CAAC;aAC1C;SACF;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IACH,mBAAC;AAAD,CAAC,AArCD,IAqCC;AAED,kBAAe,YAAY,CAAC","sourcesContent":["import { IRobotRotater, RobotDirection, RobotRotation } from '../types/robot';\n\nclass RobotRotater implements IRobotRotater {\n  private static instance: IRobotRotater;\n\n  private constructor() {}\n\n  public static getInstance(): IRobotRotater {\n    if (!RobotRotater.instance) {\n      RobotRotater.instance = new RobotRotater();\n    }\n    return RobotRotater.instance;\n  }\n\n  public rotate(currentDirection: RobotDirection, rotation: RobotRotation): RobotDirection | Error {\n    try {\n      const directions = [RobotDirection.NORTH, RobotDirection.EAST, RobotDirection.SOUTH, RobotDirection.WEST];\n      let currentDirectionIndex = directions.indexOf(currentDirection);\n\n      switch (rotation) {\n        case RobotRotation.LEFT:\n          currentDirectionIndex--;\n          break;\n        case RobotRotation.RIGHT:\n          currentDirectionIndex++;\n          break;\n      }\n\n      if (currentDirectionIndex < 0) {\n        return RobotDirection.WEST;\n      } else if (currentDirectionIndex > 3) {\n        return RobotDirection.NORTH;\n      } else {\n        return directions[currentDirectionIndex];\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\nexport default RobotRotater;\n"]}